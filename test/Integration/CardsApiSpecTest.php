<?php
/**
 * CardsApiTest
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Lob
 *
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use \OpenAPI\Client\Configuration;
use \OpenAPI\Client\ApiException;
use PHPUnit\Framework\TestCase;
use \OpenAPI\Client\Model\CardEditable;
use \OpenAPI\Client\Model\CardUpdatable;
use \OpenAPI\Client\Api\CardsApi;
use \OpenAPI\Client\Model\SortBy5;

/**
 * CardsApiSpecTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

class CardsApiSpecTest extends TestCase
{
    /**
     * Setup before running any test cases
     */
    private static $config;
    private static $cardApi;
    private static $invalidCardApi;
    private static $editableCard;
    private static $errorCard;
    private static $card1;
    private static $card2;
    private static $card3;

    // for teardown post-testing
    private $idsForCleanup = [];

    // set up constant fixtures
    public static function setUpBeforeClass(): void
    {
        // create instance of CardsApi
        self::$config = new Configuration();
        self::$config->setApiKey('basic', getenv('LOB_API_TEST_KEY'));
        self::$cardApi = new CardsApi(self::$config);

        $invalid_config = new Configuration();
        $invalid_config->setApiKey("basic", "Totally Fake Key");
        self::$invalidCardApi = new CardsApi($invalid_config);

        self::$editableCard = new CardEditable();
        self::$editableCard->setFront("https://s3-us-west-2.amazonaws.com/public.lob.com/assets/card_horizontal.pdf");
        self::$editableCard->setBack("https://s3-us-west-2.amazonaws.com/public.lob.com/assets/card_horizontal.pdf");
        self::$editableCard->setSize(CardEditable::SIZE__2_125X3_375);

        self::$errorCard = new CardEditable();
        self::$errorCard->setSize(CardEditable::SIZE__2_125X3_375);

        // for List
        self::$card1 = new CardEditable();
        self::$card1->setFront("https://s3-us-west-2.amazonaws.com/public.lob.com/assets/card_horizontal.pdf");
        self::$card1->setBack("https://s3-us-west-2.amazonaws.com/public.lob.com/assets/card_horizontal.pdf");
        self::$card1->setSize(CardEditable::SIZE__2_125X3_375);

        self::$card2 = new CardEditable();
        self::$card2->setFront("https://s3-us-west-2.amazonaws.com/public.lob.com/assets/card_horizontal.pdf");
        self::$card2->setBack("https://s3-us-west-2.amazonaws.com/public.lob.com/assets/card_horizontal.pdf");
        self::$card2->setSize(CardEditable::SIZE__2_125X3_375);

        self::$card3 = new CardEditable();
        self::$card3->setFront("https://s3-us-west-2.amazonaws.com/public.lob.com/assets/card_horizontal.pdf");
        self::$card3->setBack("https://s3-us-west-2.amazonaws.com/public.lob.com/assets/card_horizontal.pdf");
        self::$card3->setSize(CardEditable::SIZE__2_125X3_375);
    }

    public function tearDown(): void
    {
        foreach ($this->idsForCleanup as $id) {
            self::$cardApi->delete($id);
        }
    }

    public function testCardsApiInstantiation200() {
        $cardApi200 = new CardsApi(self::$config);
        $this->assertEquals(gettype($cardApi200), 'object');
    }

    public function testCreate200()
    {
        $createdCard = self::$cardApi->create(self::$editableCard);
        $this->assertMatchesRegularExpression('/card_/', $createdCard->getId());
        array_push($this->idsForCleanup, $createdCard->getId());
    }

    // uses a bad key to attempt to send a request
    public function testCreate401() {
        $this->expectException(\Exception::class);
        $this->expectExceptionMessageMatches("/Your API key is not valid. Please sign up on lob.com to get a valid api key./");
        $errorResponse = self::$invalidCardApi->create(self::$editableCard);
    }

    // does not include required field in request
    public function testCreate422()
    {
        $this->expectException(ApiException::class);
        $this->expectExceptionMessageMatches("/front is required/");
        $errorResponse = self::$cardApi->create(self::$errorCard);
    }

    public function testGet200()
    {
        $createdCard = self::$cardApi->create(self::$editableCard);
        $retrievedCard = self::$cardApi->get($createdCard->getId());
        $this->assertEquals($createdCard->getDescription(), $retrievedCard->getDescription());
        array_push($this->idsForCleanup, $createdCard->getId());
    }

    public function testGet0()
    {
        $this->expectException(\InvalidArgumentException::class);
        $this->expectExceptionMessageMatches("/Missing the required parameter/");
        $cardRetrieval = self::$cardApi->get(null);
    }

    public function testGet401()
    {
        $createdCard = self::$cardApi->create(self::$editableCard);
        array_push($this->idsForCleanup, $createdCard->getId());

        $this->expectException(\Exception::class);
        $this->expectExceptionMessageMatches("/Your API key is not valid/");
        $badRetrieval = self::$invalidCardApi->get($createdCard->getId());
    }


    public function testGet404()
    {
        $this->expectException(ApiException::class);
        $this->expectExceptionMessageMatches("/card not found/");
        $cardRetrieval = self::$cardApi->get("card_NONEXISTENT");
    }

    public function testUpdate200()
    {
        $cardUpdatable = new CardUpdatable();
        $cardUpdatable->setDescription("Updated Card");
        $createdCard = self::$cardApi->create(self::$editableCard);
        $retrievedCard = self::$cardApi->update($createdCard->getId(), $cardUpdatable);
        $this->assertEquals("Updated Card", $retrievedCard->getDescription());
        array_push($this->idsForCleanup, $createdCard->getId());
    }

    public function testUpdate0()
    {
        $cardUpdatable = new CardUpdatable();
        $cardUpdatable->setDescription("Updated Card");
        $createdCard = self::$cardApi->create(self::$editableCard);
        array_push($this->idsForCleanup, $createdCard->getId());

        $this->expectException(\InvalidArgumentException::class);
        $this->expectExceptionMessageMatches("/Missing the required parameter/");
        $retrievedCard = self::$cardApi->update($createdCard->getId(), null);
    }

    public function testUpdate401()
    {
        $createdCard = self::$cardApi->create(self::$editableCard);
        array_push($this->idsForCleanup, $createdCard->getId());

        $this->expectException(ApiException::class);
        $this->expectExceptionMessageMatches("/Your API key is not valid. Please sign up on lob.com to get a valid api key./");
        $retrievedCard = self::$invalidCardApi->update($createdCard->getId(), new CardUpdatable());
    }

    public function testUpdate404()
    {
        $this->expectException(ApiException::class);
        $this->expectExceptionMessageMatches("/card not found/");
        $retrievedCard = self::$cardApi->update("card_fakeId", new CardUpdatable());
    }

    public function testList200()
    {
        $nextUrl = "";
        $previousUrl = "";

        $cr1 = self::$cardApi->create(self::$card1);
        $cr2 = self::$cardApi->create(self::$card2);
        $cr3 = self::$cardApi->create(self::$card3);
        $listedCards = self::$cardApi->list(3);
        $this->assertGreaterThan(1, count($listedCards->getData()));
        $this->assertLessThanOrEqual(3, count($listedCards->getData()));
        $nextUrl = substr($listedCards->getNextUrl(), strrpos($listedCards->getNextUrl(), "after=") + 6);
        $this->assertIsString($nextUrl);
        array_push($this->idsForCleanup, $cr1->getId());
        array_push($this->idsForCleanup, $cr2->getId());
        array_push($this->idsForCleanup, $cr3->getId());

        // response using nextUrl
        if ($nextUrl != "") {
            $cr1 = self::$cardApi->create(self::$card1);
            $cr2 = self::$cardApi->create(self::$card2);
            $cr3 = self::$cardApi->create(self::$card3);
            $listedCardsAfter = self::$cardApi->list(3, null, $nextUrl);
            $this->assertGreaterThan(1, count($listedCardsAfter->getData()));
            $this->assertLessThanOrEqual(3, count($listedCardsAfter->getData()));
            $previousUrl = substr($listedCardsAfter->getPreviousUrl(), strrpos($listedCardsAfter->getPreviousUrl(), "before=") + 7);
            $this->assertIsString($previousUrl);
            array_push($this->idsForCleanup, $cr1->getId());
            array_push($this->idsForCleanup, $cr2->getId());
            array_push($this->idsForCleanup, $cr3->getId());
        }

        // response using previousUrl
        if ($previousUrl != "") {
            $cr1 = self::$cardApi->create(self::$card1);
            $cr2 = self::$cardApi->create(self::$card2);
            $cr3 = self::$cardApi->create(self::$card3);
            $listedCardsBefore = self::$cardApi->list(3, $previousUrl);
            $this->assertGreaterThan(1, count($listedCardsBefore->getData()));
            $this->assertLessThanOrEqual(3, count($listedCardsBefore->getData()));
            array_push($this->idsForCleanup, $cr1->getId());
            array_push($this->idsForCleanup, $cr2->getId());
            array_push($this->idsForCleanup, $cr3->getId());
        }
    }

    public function testListWithSortByParam()
    {
        $this->markTestSkipped("Cannot properly test this until the SDK is regenerated and all bugs are solved");
        // create bank accounts to list
        $cr1 = self::$cardApi->create(self::$card1);
        $cr2 = self::$cardApi->create(self::$card2);
        $cr3 = self::$cardApi->create(self::$card3);
        $listedCards = self::$cardApi->list(10, null, null, new SortBy5(array("date_created" => "asc")));

        $this->assertGreaterThan(0, $listedCards->getCount());

        // delete created bank accounts
        array_push($this->idsForCleanup, $cr1->getId());
        array_push($this->idsForCleanup, $cr2->getId());
        array_push($this->idsForCleanup, $cr3->getId());
    }

    public function testDelete200()
    {
        $createdCard = self::$cardApi->create(self::$editableCard);
        $deletedCard = self::$cardApi->delete($createdCard->getId());
        $this->assertEquals(true, $deletedCard->getDeleted());
        $this->assertMatchesRegularExpression('/card_/', $deletedCard->getId());
    }

    public function testDelete401()
    {
        $createdCard = self::$cardApi->create(self::$editableCard);
        array_push($this->idsForCleanup, $createdCard->getId());

        $this->expectException(ApiException::class);
        $this->expectExceptionMessageMatches("/Your API key is not valid. Please sign up on lob.com to get a valid api key./");
        $deletedCard = self::$invalidCardApi->delete($createdCard->getId());
    }

    public function testDelete404()
    {
        $this->expectException(ApiException::class);
        $this->expectExceptionMessageMatches("/card not found/");
        $cardDeletion = self::$cardApi->delete("card_NONEXISTENT");
    }
}
